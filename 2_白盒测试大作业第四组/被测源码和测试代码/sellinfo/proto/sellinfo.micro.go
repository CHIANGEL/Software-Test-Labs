// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: sellinfo.proto

package sellinfo

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SellInfo service

type SellInfoService interface {
	Query(ctx context.Context, in *SellInfoQueryRequest, opts ...client.CallOption) (*SellInfoMsg, error)
	Create(ctx context.Context, in *SellInfoCreateRequest, opts ...client.CallOption) (*SellInfoCreateResponse, error)
	Find(ctx context.Context, in *SellInfoFindRequest, opts ...client.CallOption) (*SellInfoFindResponse, error)
	Update(ctx context.Context, in *SellInfoUpdateRequest, opts ...client.CallOption) (*SellInfoUpdateResponse, error)
}

type sellInfoService struct {
	c    client.Client
	name string
}

func NewSellInfoService(name string, c client.Client) SellInfoService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "sellinfo"
	}
	return &sellInfoService{
		c:    c,
		name: name,
	}
}

func (c *sellInfoService) Query(ctx context.Context, in *SellInfoQueryRequest, opts ...client.CallOption) (*SellInfoMsg, error) {
	req := c.c.NewRequest(c.name, "SellInfo.Query", in)
	out := new(SellInfoMsg)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellInfoService) Create(ctx context.Context, in *SellInfoCreateRequest, opts ...client.CallOption) (*SellInfoCreateResponse, error) {
	req := c.c.NewRequest(c.name, "SellInfo.Create", in)
	out := new(SellInfoCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellInfoService) Find(ctx context.Context, in *SellInfoFindRequest, opts ...client.CallOption) (*SellInfoFindResponse, error) {
	req := c.c.NewRequest(c.name, "SellInfo.Find", in)
	out := new(SellInfoFindResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sellInfoService) Update(ctx context.Context, in *SellInfoUpdateRequest, opts ...client.CallOption) (*SellInfoUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "SellInfo.Update", in)
	out := new(SellInfoUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SellInfo service

type SellInfoHandler interface {
	Query(context.Context, *SellInfoQueryRequest, *SellInfoMsg) error
	Create(context.Context, *SellInfoCreateRequest, *SellInfoCreateResponse) error
	Find(context.Context, *SellInfoFindRequest, *SellInfoFindResponse) error
	Update(context.Context, *SellInfoUpdateRequest, *SellInfoUpdateResponse) error
}

func RegisterSellInfoHandler(s server.Server, hdlr SellInfoHandler, opts ...server.HandlerOption) error {
	type sellInfo interface {
		Query(ctx context.Context, in *SellInfoQueryRequest, out *SellInfoMsg) error
		Create(ctx context.Context, in *SellInfoCreateRequest, out *SellInfoCreateResponse) error
		Find(ctx context.Context, in *SellInfoFindRequest, out *SellInfoFindResponse) error
		Update(ctx context.Context, in *SellInfoUpdateRequest, out *SellInfoUpdateResponse) error
	}
	type SellInfo struct {
		sellInfo
	}
	h := &sellInfoHandler{hdlr}
	return s.Handle(s.NewHandler(&SellInfo{h}, opts...))
}

type sellInfoHandler struct {
	SellInfoHandler
}

func (h *sellInfoHandler) Query(ctx context.Context, in *SellInfoQueryRequest, out *SellInfoMsg) error {
	return h.SellInfoHandler.Query(ctx, in, out)
}

func (h *sellInfoHandler) Create(ctx context.Context, in *SellInfoCreateRequest, out *SellInfoCreateResponse) error {
	return h.SellInfoHandler.Create(ctx, in, out)
}

func (h *sellInfoHandler) Find(ctx context.Context, in *SellInfoFindRequest, out *SellInfoFindResponse) error {
	return h.SellInfoHandler.Find(ctx, in, out)
}

func (h *sellInfoHandler) Update(ctx context.Context, in *SellInfoUpdateRequest, out *SellInfoUpdateResponse) error {
	return h.SellInfoHandler.Update(ctx, in, out)
}
