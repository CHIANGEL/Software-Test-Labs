syntax = "proto3";

service SellInfo {
    rpc Query (SellInfoQueryRequest) returns (SellInfoMsg);
    rpc Create (SellInfoCreateRequest) returns (SellInfoCreateResponse);
    rpc Find (SellInfoFindRequest) returns (SellInfoFindResponse);
    rpc Update (SellInfoUpdateRequest) returns (SellInfoUpdateResponse);
}

enum SellStatus {
    UNKNOWN = 0;
    SELLING = 1;
    RESERVED = 2;
    DONE = 3;
    EXPIRED = 4;
    CLOSED = 5;
}

message SellInfoMsg {
    int32 sellInfoID = 1;
    SellStatus status = 2;
    int64 releaseTime = 3;
    int64 validTime = 4;
    string goodName = 5;
    double price = 6;
    string description = 7;
    string contentID = 8;
    int32 userID = 9;

    bool clearEmpty = 99;
}

message SellInfoQueryRequest {
    int32 sellInfoID = 1;
}

message SellInfoCreateRequest {
    int64 validTime = 1;
    string goodName = 2;
    double price = 3;
    string description = 4;
    string contentID = 5;
    string contentToken = 6;
    int32 userID = 7;
    repeated string tags = 8;
}

message SellInfoCreateResponse {
    enum Status {
        UNKNOWN = 0;
        INVALID_PARAM = -1;
        SUCCESS = 1;
        INVALID_TOKEN = 2;
    }
    Status status = 1;
    int32 sellInfoID = 2;
}

message SellInfoFindRequest {
    int32 userID = 1;
    SellStatus status = 2;
    string goodName = 3;
    double lowPrice = 4;
    double highPrice = 5;
    uint32 limit = 6;
    uint32 offset = 7;
}

message SellInfoFindResponse {
    repeated SellInfoMsg sellInfo = 1;
}

message SellInfoUpdateRequest {
    int32 sellInfoID = 1;
    SellStatus status = 2;
}

message SellInfoUpdateResponse {
    enum Status {
        UNKNOWN = 0;
        INVALID_PARAM = -1;
        SUCCESS = 1;
        NOT_FOUND = 2;
    }
    Status status = 1;
}