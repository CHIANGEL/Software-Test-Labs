// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: content.proto

package content

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Content service

type ContentService interface {
	Create(ctx context.Context, in *ContentCreateRequest, opts ...client.CallOption) (*ContentCreateResponse, error)
	CreateTag(ctx context.Context, in *ContentCreateTagRequest, opts ...client.CallOption) (*ContentCreateTagResponse, error)
	Update(ctx context.Context, in *ContentUpdateRequest, opts ...client.CallOption) (*ContentUpdateResponse, error)
	Delete(ctx context.Context, in *ContentDeleteRequest, opts ...client.CallOption) (*ContentDeleteResponse, error)
	Query(ctx context.Context, in *ContentQueryRequest, opts ...client.CallOption) (*ContentQueryResponse, error)
	Check(ctx context.Context, in *ContentCheckRequest, opts ...client.CallOption) (*ContentCheckResponse, error)
}

type contentService struct {
	c    client.Client
	name string
}

func NewContentService(name string, c client.Client) ContentService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "content"
	}
	return &contentService{
		c:    c,
		name: name,
	}
}

func (c *contentService) Create(ctx context.Context, in *ContentCreateRequest, opts ...client.CallOption) (*ContentCreateResponse, error) {
	req := c.c.NewRequest(c.name, "Content.Create", in)
	out := new(ContentCreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) CreateTag(ctx context.Context, in *ContentCreateTagRequest, opts ...client.CallOption) (*ContentCreateTagResponse, error) {
	req := c.c.NewRequest(c.name, "Content.CreateTag", in)
	out := new(ContentCreateTagResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) Update(ctx context.Context, in *ContentUpdateRequest, opts ...client.CallOption) (*ContentUpdateResponse, error) {
	req := c.c.NewRequest(c.name, "Content.Update", in)
	out := new(ContentUpdateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) Delete(ctx context.Context, in *ContentDeleteRequest, opts ...client.CallOption) (*ContentDeleteResponse, error) {
	req := c.c.NewRequest(c.name, "Content.Delete", in)
	out := new(ContentDeleteResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) Query(ctx context.Context, in *ContentQueryRequest, opts ...client.CallOption) (*ContentQueryResponse, error) {
	req := c.c.NewRequest(c.name, "Content.Query", in)
	out := new(ContentQueryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentService) Check(ctx context.Context, in *ContentCheckRequest, opts ...client.CallOption) (*ContentCheckResponse, error) {
	req := c.c.NewRequest(c.name, "Content.Check", in)
	out := new(ContentCheckResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Content service

type ContentHandler interface {
	Create(context.Context, *ContentCreateRequest, *ContentCreateResponse) error
	CreateTag(context.Context, *ContentCreateTagRequest, *ContentCreateTagResponse) error
	Update(context.Context, *ContentUpdateRequest, *ContentUpdateResponse) error
	Delete(context.Context, *ContentDeleteRequest, *ContentDeleteResponse) error
	Query(context.Context, *ContentQueryRequest, *ContentQueryResponse) error
	Check(context.Context, *ContentCheckRequest, *ContentCheckResponse) error
}

func RegisterContentHandler(s server.Server, hdlr ContentHandler, opts ...server.HandlerOption) error {
	type content interface {
		Create(ctx context.Context, in *ContentCreateRequest, out *ContentCreateResponse) error
		CreateTag(ctx context.Context, in *ContentCreateTagRequest, out *ContentCreateTagResponse) error
		Update(ctx context.Context, in *ContentUpdateRequest, out *ContentUpdateResponse) error
		Delete(ctx context.Context, in *ContentDeleteRequest, out *ContentDeleteResponse) error
		Query(ctx context.Context, in *ContentQueryRequest, out *ContentQueryResponse) error
		Check(ctx context.Context, in *ContentCheckRequest, out *ContentCheckResponse) error
	}
	type Content struct {
		content
	}
	h := &contentHandler{hdlr}
	return s.Handle(s.NewHandler(&Content{h}, opts...))
}

type contentHandler struct {
	ContentHandler
}

func (h *contentHandler) Create(ctx context.Context, in *ContentCreateRequest, out *ContentCreateResponse) error {
	return h.ContentHandler.Create(ctx, in, out)
}

func (h *contentHandler) CreateTag(ctx context.Context, in *ContentCreateTagRequest, out *ContentCreateTagResponse) error {
	return h.ContentHandler.CreateTag(ctx, in, out)
}

func (h *contentHandler) Update(ctx context.Context, in *ContentUpdateRequest, out *ContentUpdateResponse) error {
	return h.ContentHandler.Update(ctx, in, out)
}

func (h *contentHandler) Delete(ctx context.Context, in *ContentDeleteRequest, out *ContentDeleteResponse) error {
	return h.ContentHandler.Delete(ctx, in, out)
}

func (h *contentHandler) Query(ctx context.Context, in *ContentQueryRequest, out *ContentQueryResponse) error {
	return h.ContentHandler.Query(ctx, in, out)
}

func (h *contentHandler) Check(ctx context.Context, in *ContentCheckRequest, out *ContentCheckResponse) error {
	return h.ContentHandler.Check(ctx, in, out)
}
